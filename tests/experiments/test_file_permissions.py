
import os
import pytest

from simexpal import base
from simexpal.launch.fork import ForkLauncher
from simexpal.util import try_rmfile, try_rmtree

file_dir = os.path.abspath(os.path.dirname(__file__))

yml_dirs = ['../../examples/sorting',
            '../../examples/sorting_fileless',
           ]

@pytest.mark.parametrize('rel_yml_path', yml_dirs)
def test_experiments_missing_program(rel_yml_path):
    exp_dir = os.path.join(file_dir, rel_yml_path)
    cfg = base.config_for_dir(exp_dir)

    # Make sure that the needed instances are installed.
    for instance in cfg.all_instances():
        instance.install()

        assert instance.check_available()

    # Launch all runs
    launcher = ForkLauncher()
    for run in cfg.discover_all_runs():
        launcher.submit(cfg, run)

        assert run.get_status() == base.Status.FINISHED

        # Check that the files generated by simexpal are read/write-able
        # and then delete them
        try_read_write_and_delete(run.aux_file_path('lock'))
        try_read_write_and_delete(run.aux_file_path('run'))
        try_read_write_and_delete(run.output_file_path('out'))
        try_read_write_and_delete(run.output_file_path('status'))

        # Delete the experiment folders
        try_rmtree(run.experiment.aux_subdir)
        try_rmtree(run.experiment.output_subdir)

    # Delete instances
    for instance in cfg.all_instances():
        if not instance.is_fileless:
            try_read_write_and_delete(instance.fullpath)

    # Delete top level folders
    try_rmtree(os.path.join(cfg.basedir, 'aux'))
    try_rmtree(os.path.join(cfg.basedir, 'output'))
    try_rmtree(os.path.join(cfg.instance_dir()))

    # Delete cache files
    try_read_write_and_delete(cfg.status_cache_path)
    try_read_write_and_delete(os.path.join(exp_dir, 'validation.cache'))

def try_read_write_and_delete(path):
    try:
        fd = os.open(path, os.O_RDWR)
    except FileNotFoundError:
        return

    os.close(fd)
    try_rmfile(path)
